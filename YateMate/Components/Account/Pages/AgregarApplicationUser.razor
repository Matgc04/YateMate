@page "/agregarApplicationUser"
@using YateMate.Aplicacion.UseCases.ApplicationUser
@using  System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using YateMate.Aplicacion.Entidades;

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@*dice que no se usa pero es mentira, si lo sacas se creashea la pagina*@

@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager

<PageTitle>Agregar Cliente</PageTitle>

<h1>Agregar Cliente</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message"/>
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator/>
            <h2>Crea una nueva cuenta.</h2>
            <hr/>
            
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>

            <div class="form-floating mb-3">
                <InputText id="nombre" @bind-Value="Input.Nombre" class="form-control" aria-required="true" />
                <label for="nombre">Nombre</label>
                <ValidationMessage For="() => Input.Nombre" class="text-danger" />
            </div>
            
            <div class="form-floating mb-3">
                <InputText id="apellido" @bind-Value="Input.Apellido" class="form-control" aria-required="true" />
                <label for="apellido">Apellido</label>
                <ValidationMessage For="() => Input.Apellido" class="text-danger" />
            </div>
            
            <div class="form-floating mb-3">
                <InputText id="nacionalidad" @bind-Value="Input.Nacionalidad" class="form-control" aria-required="true" />
                <label for="nacionalidad">Nacionalidad</label>
                <ValidationMessage For="() => Input.Nacionalidad" class="text-danger" />
            </div>
            
            <div class="form-floating mb-3">
                <label for="genero" class="text-muted">GÃ©nero</label>
                <InputSelect id="genero" @bind-Value="Input.Genero" class="form-control" aria-required="true">
                    <ValidationMessage For="() => Input.Genero" class="text-danger"/>
                    <option value=""></option> @* tiene que estar en blanco porque si no muestra Masculino re feo *@
                    <option value="Masculino">Masculino</option>
                    <option value="Femenino">Femenino</option>
                </InputSelect>
            </div>

            <div class="form-floating mb-3">
                <InputNumber id="dni" @bind-Value="Input.Dni" class="form-control" aria-required="true" />
                <label for="dni">Dni</label>
                <ValidationMessage For="() => Input.Dni" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputDate id="fechaNacimiento" @bind-Value="Input.FechaNacimiento" class="form-control" aria-required="true" />
                <label for="fechaNacimiento">Fecha de nacimiento</label>
                <ValidationMessage For="() => Input.FechaNacimiento" class="text-danger" />
            </div>
            
            <button type="submit" class="w-100 btn btn-lg btn-primary">Registrarse</button>
        </EditForm>
    </div>
    
</div>

@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        //var user = CreateUser();
        //MailAddress address = new MailAddress(Input.Email);
        //string userName = address.User;

        var user = new ApplicationUser()
        {
            //UserName = userName,
            Email = Input.Email,
            Nombre = Input.Nombre,
            Apellido = Input.Apellido,
            Nacionalidad = Input.Nacionalidad,
            Genero = Input.Genero, 
            Dni = Input.Dni
                
        };
        //Input.Password = "Falso123,";
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, "Falso123,"); //tenes un overload sin contrasenia pero tira error
        //var result = await UserManager.CreateAsync(user);
        ////pongo una contrasenia por defecto porque es necesaria, no hay problema porque no confirmo email hasta cambiar la contrasenia por primera vez
        if (!result.Succeeded)
        {
            _identityErrors = result.Errors;
            return;
        }
        await UserManager.AddToRoleAsync(user, "Cliente");
        Logger.LogInformation("User created a new account without password.");
        
        
        //envio mail de cambiar contrasenia
        
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code, ["email"] = Input.Email });
        //aca se pasa como parametro de la url un codigo usado para validar por Identity y el email del usuario asi no lo tiene que tipear despues
        //capaz se puede que con el codigo saque el email pero asi es mas facil
        
        Console.WriteLine($"La url para poner tu contrasenia es {callbackUrl}");
        
        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";
        
        [Required]
        [Display(Name = "Nombre")]
        public string Nombre { get; set; } = null!;
        
        [Required]
        [Display(Name = "Apellido")]
        public string Apellido { get; set; } = null!;
        
        [Required]
        [Display(Name = "Genero")]
        public Genero Genero { get; set; }

        [Required]
        [Display(Name = "Fecha de Nacimiento")]
        public DateTime FechaNacimiento { get; set; }

        [Required]
        [Display(Name = "Dni")]
        public int Dni { get; set; }
        
        [Required]
        [Display(Name = "Nacionalidad")]
        public string Nacionalidad { get; set; } = "";
    }

}
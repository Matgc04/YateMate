@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using System.Net.Mail
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using YateMate.Aplicacion.Entidades;
@using YateMate.Aplicacion.UseCases.ApplicationUser

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject ModificarApplicationUserUseCase ModificarUser;

@attribute [Authorize(Roles = "Cliente")]

<PageTitle>Mi perfil</PageTitle>

<h3>Modificar</h3>
<StatusMessage Message="@message"/>
@* <StatusMessage/> *@
<div class="row">
    <div class="col-md-6">
        <EditForm EditContext="editContext" FormName="profile" OnSubmit="SubmitPelado" method="post">
            <CustomValidator @ref="customValidator"></CustomValidator>
            @* <ValidationSummary class="text-danger" role="alert"/> *@
            
            <div class="form-floating mb-3">
                <InputText id="email" @bind-Value="Input.EmailAModificar" class="form-control" aria-required="true" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.EmailAModificar" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText id="nombre" @bind-Value="Input.Nombre" class="form-control" aria-required="true" />
                <label for="nombre">Nombre</label>
                <ValidationMessage For="() => Input.Nombre" class="text-danger" />
            </div>
            
            <div class="form-floating mb-3">
                <InputText id="apellido" @bind-Value="Input.Apellido" class="form-control" aria-required="true" />
                <label for="apellido">Apellido</label>
                <ValidationMessage For="() => Input.Apellido" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputSelect id="nacionalidad" @bind-Value="Input.Nacionalidad" class="form-select" aria-required="true" TValue="Nacionalidad?">
                    <ValidationMessage For="() => Input.Nacionalidad" class="text-danger"/>
                    @foreach (Nacionalidad nacionalidad in Enum.GetValues(typeof(Nacionalidad)))
                    {
                    <option value=@nacionalidad> @nacionalidad </option>
                    }
                </InputSelect>
                <label for="nacionalidad" class="text-muted">Nacionalidad</label>
            </div>

            <div class="form-floating mb-3">
                
                <InputSelect id="genero" @bind-Value="Input.Genero" class="form-select" aria-required="true" TValue="Genero?">
                    <ValidationMessage For="() => Input.Genero" class="text-danger"/>

                    @foreach (Genero genero in Enum.GetValues(typeof(Genero)))
                    {
                        <option value=@genero> @genero </option>
                    }
                </InputSelect>
                <label for="genero" class="text-muted">Género</label>
            </div>

            <div class="form-floating mb-3">
                <InputNumber id="dni" @bind-Value="Input.Dni" class="form-control" aria-required="true" />
                <label for="dni">Dni</label>
                <ValidationMessage For="() => Input.Dni" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputDate id="fechaNacimiento" @bind-Value="Input.FechaNacimiento" class="form-control" aria-required="true" />
                <label for="dni">Fecha de nacimiento</label>
                <ValidationMessage For="() => Input.FechaNacimiento" class="text-danger" />
            </div>
            
            <button type="submit" class="w-100 btn btn-lg btn-primary">Modificar datos</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser _user = default!;
    private string? _email;
    
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    private string? message;
    
    private EditContext? editContext;

    public CustomValidator customValidator;
    
    
    private async Task SubmitPelado()
    {
        Console.WriteLine($" email de usuario que puso es {Input.EmailAModificar}");
        var errors = new Dictionary<string, List<string>>();
        
        foreach (var property in Input.GetType().GetProperties()) //me cago en microsoft
        {
            var value = property.GetValue(Input);
            // Console.WriteLine(property.Name);
            if (String.IsNullOrWhiteSpace(value?.ToString()))
            {
                errors.Add(property.Name, new List<string>() {"Este campo es obligatorio"});
            }
        }
        
        if (Input.Dni is not null)
        {
            if(Input.Dni.Value.CompareTo(1000000) < 0 || Input.Dni.Value.CompareTo(100000000) > 0) 
                errors.Add(nameof(Input.Dni), new List<string>(){"El número de dni debe estar entre un millon (1.000.000) y cien millones (100.000.000)"});
        }
        
        if (Input.FechaNacimiento is not null)
        {
            if (DateTime.Compare((DateTime)Input.FechaNacimiento, DateTime.Today.AddYears(-18)) > 0)
            {
                errors.Add(nameof(Input.FechaNacimiento), new List<string>(){"La edad mínima permitida es 18 años"});
                Console.WriteLine("a1");

            }

            if (DateTime.Compare((DateTime)Input.FechaNacimiento, DateTime.Today.AddYears(-120)) < 0)
            {
                Console.WriteLine("a2");
                errors.Add(nameof(Input.FechaNacimiento), new List<string>(){"La edad máxima permitida es 120 años"});
            }
        }

        if (!String.IsNullOrWhiteSpace(Input.EmailAModificar))
        {
            var mail = new MailAddress("hola@hola.com");
            var valido = MailAddress.TryCreate(Input.EmailAModificar, out mail);
            if (!valido)
            {
                errors.Add(nameof(Input.EmailAModificar), new List<string>() { "La direccion de email no es valida" });
            }
        }

        if (errors.Count > 0)
        {
            customValidator.DisplayErrors(errors);
            return;
        }
        
        await OnValidSubmitAsync();
    }
    
    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        editContext = new(Input);
        
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _email = await UserManager.GetUserNameAsync(_user);

        // foreach (var elem in _user.GetType().GetProperties())
        // {
        //     Console.WriteLine($"propiedad sacada de la bd {elem.GetValue()}");
        // }
        
        Input.Nombre ??= _user.Nombre;
        Input.Apellido ??= _user.Apellido;
        Input.FechaNacimiento ??= _user.FechaNacimiento;
        Input.Dni ??= _user.Dni;
        Input.Genero ??= _user.Genero;
        Input.Nacionalidad ??= _user.Nacionalidad;
        Input.EmailAModificar ??= _email;
        
        Console.WriteLine($"Datos de los inputs" +
                          $" mail:{Input.EmailAModificar}" +
                          $" nom:{Input.Nombre}" +
                          $" ap:{Input.Apellido}" +
                          $" nacimiento:{Input.FechaNacimiento}" +
                          $" dni:{Input.Dni}" +
                          $" Genero:{Input.Genero}" +
                          $" nacionalidad:{Input.Nacionalidad}");
    }

    
    private async Task OnValidSubmitAsync()
    {
        Console.WriteLine($"Datos de los inputs despues del form {Input.EmailAModificar}" +
                          $" nom:{Input.Nombre}" +
                          $" ap:{Input.Apellido}" +
                          $" nacimiento:{Input.FechaNacimiento}" +
                          $" dni:{Input.Dni}" +
                          $" Genero:{Input.Genero}" +
                          $" nacionalidad:{Input.Nacionalidad}");
        
        _user.Nombre = Input.Nombre;
        _user.Apellido = Input.Apellido;
        _user.FechaNacimiento = Input.FechaNacimiento;
        _user.Dni = Input.Dni;
        _user.Genero = (Genero) Input.Genero!;
        _user.Nacionalidad = (Nacionalidad) Input.Nacionalidad!;
        
        ModificarUser.Ejecutar(_user);
        
        message = "Tus cambios se han guardado";
        
        if (Input.EmailAModificar is not null && Input.EmailAModificar != _email)
        {
            var otroUserConEseMail = await UserManager.FindByEmailAsync(Input.EmailAModificar);
            if (otroUserConEseMail is not null)
            {
                message+= ", excepto el email, que ya esta en uso";
                //var errors = new Dictionary<string, List<string>>();
                //errors.Add(nameof(Input.EmailAModificar), new List<string>() { "La direccion de email ya esta en uso" });
                Input.EmailAModificar = _email;
                //customValidator.DisplayErrors(errors);
            }
            else
            {
                
                var userId = await UserManager.GetUserIdAsync(_user);
                var code = await UserManager.GenerateChangeEmailTokenAsync(_user, Input.EmailAModificar);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
                    new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.EmailAModificar, ["code"] = code });

                Console.WriteLine($"email enviado onValidSubmit Async con el link {callbackUrl}");

                await EmailSender.SendConfirmationLinkAsync(_user, Input.EmailAModificar, HtmlEncoder.Default.Encode(callbackUrl));

                message = "Hemos enviado un link de confirmación para el cambio de correo.";
            }

        }
        else
        {
            Console.WriteLine($"No se mando mail porq el mail era igual {Input.EmailAModificar} {_email}");
        }
        
        //await UserManager.UpdateAsync(_user); // con esto no haria falta inyectar el modificarUseCase pero bueno, queda lindo
        await SignInManager.RefreshSignInAsync(_user); //no se si hace falta pero ya venia esto
        // RedirectManager.RedirectToCurrentPageWithStatus("Tu perfil se ha actualizado", HttpContext);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Ingresa un email")]
        [EmailAddress(ErrorMessage = "La direccion de correo ingresada no es valida")]
        [Display(Name = "Email")]
        public string? EmailAModificar { get; set; } = null;
        
        [Required(ErrorMessage = "Ingresa un nombre")]
        [Display(Name = "Nombre")]
        public string? Nombre { get; set; } = null!;
        
        [Required(ErrorMessage = "Ingresa un apellido")]
        [Display(Name = "Apellido")]
        public string? Apellido { get; set; } = null!;
        
        [Required(ErrorMessage = "Ingresa un genero")]
        [Display(Name = "Genero")]
        public Genero? Genero { get; set; }

        [Required(ErrorMessage = "Ingresa una fecha de nacimiento")]
        [Display(Name = "Fecha de Nacimiento")]
        public DateTime? FechaNacimiento { get; set; } = null;

        [Required(ErrorMessage = "Ingresa un Dni")]
        [Display(Name = "Dni")]
        [Range(1000000, 100000000, ErrorMessage = "El número de dni debe estar entre un millon (1.000.000) y cien millones (100.000.000)")]
        public int? Dni { get; set; } = null;

        [Required(ErrorMessage = "Ingresa una nacionalidad")]
        [Display(Name = "Nacionalidad")]
        public Nacionalidad? Nacionalidad { get; set; } = null;
    }
    
}
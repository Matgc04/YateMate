@page "/Account/Manage/ChangePassword"

@* @using System.ComponentModel.DataAnnotations *@
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using YateMate.Aplicacion.Entidades;


@inject UserManager<ApplicationUser> UserManager
@* @inject SignInManager<ApplicationUser> SignInManager *@
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@* @inject ILogger<ChangePassword> Logger *@
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject NavigationManager NavigationManager
@inject IEmailSender<ApplicationUser> EmailSender

<PageTitle>Cambiar Contraseña</PageTitle>

<h3>Cambiar contraseña</h3>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="new()" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <button type="submit" class="w-100 btn btn-lg btn-primary">Solicitar Cambio</button>
        </EditForm>
    </div>
</div>

@code {
    
    //TODO: llamar a repo con idUsuario y con eso llenar _user
    private ApplicationUser _user = default!;
    private string? _emailUsuario;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _emailUsuario = authState.User.Identity.Name;
        var userId = authState.User.Claims.FirstOrDefault().Value;
        
        if (String.IsNullOrEmpty(_emailUsuario) || userId is null)
            throw new Exception("el id o el email del usuario es null o vacio, no se que decirte");
        
        _user = await UserManager.FindByIdAsync(userId);
        
    }

    private async Task OnValidSubmitAsync()
    {
        var code = await UserManager.GeneratePasswordResetTokenAsync(_user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code, ["email"] = _user.Email });
        Console.WriteLine($"La url para poner tu contrasenia es {callbackUrl}");
        
        await EmailSender.SendPasswordResetLinkAsync(_user, _user.UserName, HtmlEncoder.Default.Encode(callbackUrl));
        
        RedirectManager.RedirectTo("Account/ForgotPasswordConfirmation");
    }

    

}
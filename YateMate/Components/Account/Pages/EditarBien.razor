@page "/bien/{Id:int?}"

@using System.ComponentModel.DataAnnotations
@using YateMate.Aplicacion.UseCases.Bien

@inject ObtenerBienUseCase ObtenerBienUseCase
@inject ModificarBienUseCase ModificarBienUseCase
@inject AgregarBienUseCase AgregarBienUseCase
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager Navegador;

@rendermode InteractiveServer

@if (_err.Length > 1)
{
    <h3>@_err</h3>
}
@if (_esNuevoBien)
{
    <h3>Agregando un nuevo bien</h3>
}
else
{
    <h3>Modificando al bien con id "@_bien.Id"</h3>
}

<div class="col-md-4">
    <EditForm Model="Input" method="post" OnValidSubmit="Aceptar" FormName="bien">

        <div class="form-floating mb-3">
            <InputText id="nombre" @bind-Value="Input.Nombre" class="form-control" aria-required="true" />
            <label for="nombre">Nombre</label>
            @* <ValidationMessage For="() => Input.Nombre" class="text-danger" /> *@
        </div>
        
        
        <div class="form-floating mb-3">
            <InputText id="Descripcion" @bind-Value="Input.Descripcion" class="form-control" aria-required="required"/>
            <label for="Descripcion" class="form-control"> Descripcion </label>
        </div>

        <div class="form-floating mb-3">
            <InputFile id="Imagen" @bind-Value="Input.Imagen" class="form-control" required="required" accept="image/*"/>
            @* <label for="Imagen" class="form-control"> Imagen</label> *@
        </div>

        <button type="submit" class="w-100 btn btn-lg btn-primary">Aceptar</button>
    </EditForm>
</div>



@code {
    
    [CascadingParameter]
    private Task<AuthenticationState>? _AuthenticationState { get; set; }

    private string? _userId;    
    protected override async Task OnInitializedAsync()
    {
        if (_AuthenticationState is not null)
        {
            var authState = await _AuthenticationState;
            var user = authState.User;
            
            _userId = user.Claims.FirstOrDefault()?.Value;
        }
        else
        {
            Console.WriteLine("Authstate es null, no se que decirte");
        }
    }
    
    
    bool _esNuevoBien = true;
    Bien _bien = new Bien("", "", "", "");
    string _err = "";

    private InputModel Input{ get; set; } = new();
    
    
    [Parameter] public int? Id { get; set; }
    protected override void OnParametersSet()
    {
        if (Id != null)
        {
            var bienHallado = ObtenerBienUseCase.Ejecutar(Id.Value);
            if (bienHallado != null)
            {
                _bien = bienHallado;
                _esNuevoBien = false;
            }
        }
    }
    
    void Aceptar()
    {
            // Console.WriteLine("Entro al try");
            _bien.Nombre = Input.Nombre;
            _bien.Descripcion = Input.Descripcion;
            _bien.UsuarioId = _userId; 
            _bien.Imagen = Input.Imagen;
            
            // Console.WriteLine(Input.Nombre);
            if (_esNuevoBien)
            {
                // Console.WriteLine("Entro al if");
                AgregarBienUseCase.Ejecutar(_bien);
            }
            else
            {
                ModificarBienUseCase.Ejecutar(_bien);
            }
            Navegador.NavigateTo("/ListarMisBienes");
            
    }

    private sealed class InputModel
    {
        [Required]
        public string Nombre;
        
        [Required]
        public string Descripcion;
        
        [Required]
        public string Imagen;
    }

}
@page "/Account/ResetPassword/"


@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using YateMate.Aplicacion.Entidades;

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager MyNavigationManager

<PageTitle>Reset password</PageTitle>

<h1>Cambia tu contraseña</h1>
<hr/>
<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message"/>
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>

            <input type="hidden" name="Input.Code" value="@Input.Code"/>
            
            <div class="form-floating mb-3">
                <InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password."/>
                <label for="password" class="form-label">Contraseña</label>
                <ValidationMessage For="() => Input.Password" class="text-danger"/>
            </div>
            @* <div class="form-floating mb-3"> *@
            @*     <InputText id="confirm-password" type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password."/> *@
            @*     <label for="confirm-password" class="form-label">Confirma tu contraseña</label> *@
            @*     <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger"/> *@
            @* </div> *@
            <button type="submit" class="w-100 btn btn-lg btn-primary">Cambiar contraseña</button>
        </EditForm>
    </div>
</div>

@code {
    
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? Code { get; set; }

    [SupplyParameterFromQuery] private string? email { get; set; }
    
    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        
        if (email is null) //si email es null es porque el villero de mailtrap me puso el &amp;
        {
            string decodedUrl = MyNavigationManager.Uri.Replace("&amp;", "&");;
            Console.WriteLine($"la url actual sin el amp es {decodedUrl}");
            var parameters = HttpUtility.ParseQueryString(decodedUrl);

            // Get the value of the "email" parameter
            email = parameters["email"];
        }
        Input.InpEmail = email; //hago esto porque en la hu dijimos que solo ponia la contraseña no el mail
        Console.WriteLine($"tenemos un amp en la url? {MyNavigationManager.Uri.Contains("amp;")}");
        Console.WriteLine($"el parametro mail es {email}");

    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.InpEmail);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            // RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
            throw new Exception("No se encontro ningun usuario con ese mail, y lo pasaste por la url, fijate que onda");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            //confirmo mail si es la primera vez que entra al sistema
            if (! await UserManager.IsEmailConfirmedAsync(user))
                await UserManager.ConfirmEmailAsync(user, await UserManager.GenerateEmailConfirmationTokenAsync(user));
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        _identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        public string InpEmail { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        // [DataType(DataType.Password)]
        // [Display(Name = "Confirm password")]
        // [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        // public string ConfirmPassword { get; set; } = "";

        [Required] public string Code { get; set; } = "";
    }

}
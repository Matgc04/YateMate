@page "/ListarMisBienes"
@* @rendermode InteractiveServer *@
@using YateMate.Aplicacion.UseCases.Bien
@using YateMate.Components.Account.Shared
@inject IdentityUserAccessor UserAccessor;
@inject ListarBienesDeUseCase ListarBienesDeUseCase
@inject EliminarBienUseCase EliminarBienUseCase
@inject NavigationManager Navegador;

<h3>Mis bienes</h3>

<table class="table">
    <thead>
    <tr>
        <th>IMAGEN</th>
        <th>NOMBRE</th>
        <th>DESCRIPCION</th>
        <th>ID</th>
        <th>ID USUARIO</th>
        <th>ACCION</th>
    </tr>
    </thead>
    <tbody>
    @if (!_tieneElementos) {
    <p>No tiene bienes cargados en el sistema.</p>
    }
    else
    {
        @foreach (var bien in _lista)
        {
            <tr>
                <td>@bien.Imagen</td>
                <td>@bien.Nombre</td>
                <td>@bien.Descripcion</td>
                <td>@bien.Id</td>
                <td>@bien.UsuarioId</td>
                <td>
                    <EditForm Model="Input" FormName="@($"Modificar-bien-{bien.Id}")" OnValidSubmit="() => ModificarBien(bien)" method="post">
                        <InputText hidden="true" @bind-Value="Input.a"/>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Modificar</button>
                    </EditForm>
                    <EditForm Model="Input" FormName="@($"Eliminar-bien-{bien.Id}")" OnValidSubmit="() => Eliminar(bien)" method="post">
                        <InputText hidden="true" @bind-Value="Input.a"/>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Eliminar</button>
                    </EditForm>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@code {
    
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    private sealed class InputModel
    {
        public string a { get; set; } = "";
    }
    
    DialogoConfirmacion dialogo = null!;
    bool _tieneElementos;
    List<Bien> _lista = new List<Bien>();
    Bien? _BienParaEliminar;
    
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;
    ApplicationUser _user;
    
    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _lista = ListarBienesDeUseCase.Ejecutar(_user.Id);
    }
    
    // protected override void OnInitialized()
    // {
    //     _lista = ListarBienesDeUseCase.Ejecutar(_user.Id);
    // }
    
    protected override void OnParametersSet()
    {
        if(_lista.Count > 0) 
        {
            _tieneElementos = true;
        }
    }
    
    void ModificarBien(Bien bien)
    {
        Navegador.NavigateTo($"bien/{bien.Id}");
    }
    private void Eliminar(Bien bien)
    {
        _BienParaEliminar = bien;
        EliminarBienUseCase.Ejecutar(_BienParaEliminar.Id);
        _lista = ListarBienesDeUseCase.Ejecutar(_user.Id); 
        Navegador.Refresh();
    }
}
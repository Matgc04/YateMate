@page "/ListarMisBienes"
@rendermode InteractiveServer

@using YateMate.Aplicacion.UseCases.Bien
@using YateMate.Components.Account.Shared
@* @inject IdentityUserAccessor UserAccessor; *@
@inject ListarBienesDeUseCase ListarBienesDeUseCase
@inject EliminarBienUseCase EliminarBienUseCase
@inject NavigationManager Navegador;

<h3>Mis bienes</h3>

@if (!_tieneElementos) {
    <p>No tiene bienes cargados en el sistema.</p>
    
<button type="button" class="btn btn-primary" @onclick="@(() => Navegador.NavigateTo("bien/"))">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"></path>
    </svg>
    Agregar Bien
</button>
              
   


}
else
    {
        <table class="table">
            <thead>
            <tr>
                <th>IMAGEN</th>
                <th>NOMBRE</th>
                <th>DESCRIPCION</th>
                <th>ID</th>
                <th>ID USUARIO</th>
                <th>ACCION</th>
            </tr>
            </thead>
            <tbody>
        @foreach (var bien in _lista)
        {
            <tr>
                @* <td> <img src=@bien.Imagen alt="Imagen del usuario"/> </td> *@
                <td>@bien.Nombre</td>
                <td>@bien.Descripcion</td>
                <td>@bien.Id</td>
                <td>@bien.UsuarioId</td>
                <td>
                    <EditForm Model="new()" FormName="@($"Modificar-bien-{bien.Id}")" OnValidSubmit="() => ModificarBien(bien)" method="post">
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Modificar</button>
                    </EditForm>
                    <EditForm Model="new()" FormName="@($"Eliminar-bien-{bien.Id}")" OnValidSubmit="() => Eliminar(bien)" method="post">
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Eliminar</button>
                    </EditForm>
                </td>
            </tr>
        }
            </tbody>
        </table>
    }
    

@code {
    
    
    DialogoConfirmacion dialogo = null!;
    bool _tieneElementos;
    List<Bien> _lista = new();
    Bien? _BienParaEliminar;
    
    [CascadingParameter]
    private Task<AuthenticationState>? _AuthenticationState { get; set; }
    private string? _userId;    
    
    protected override async Task OnInitializedAsync()
    {
        if (_AuthenticationState is not null)
        {
            var authState = await _AuthenticationState;
            var user = authState.User;
            
            _userId = user.Claims.FirstOrDefault()?.Value;
        }
        else
        {
            Console.WriteLine("Authstate es null, no se que decirte");
        }

        _lista = ListarBienesDeUseCase.Ejecutar(_userId);
    }
    
    
    protected override void OnParametersSet()
    {
        if(_lista.Count > 0) 
        {
            _tieneElementos = true;
        }
    }
    
    void ModificarBien(Bien bien)
    {
        Navegador.NavigateTo($"bien/{bien.Id}");
    }
    
    private void Eliminar(Bien bien)
    {
        _BienParaEliminar = bien;
        EliminarBienUseCase.Ejecutar(_BienParaEliminar.Id);
        _lista = ListarBienesDeUseCase.Ejecutar(_userId);
        if (_lista.Count == 0)
            _tieneElementos = false;
        
    }
}
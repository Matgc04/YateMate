@using System.Net.Mail
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using YateMate.Aplicacion.UseCases.ApplicationUser
@using YateMate.Components.Account.Pages
@* @using YateMate.Components.Account.Shared *@ @*No agreguen esta linea aunque tire warning abajo porque si no se rompe el status message, insolito*@

@inject UserManager<ApplicationUser> UserManager
@inject ModificarApplicationUserUseCase ModificarUser;
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager


<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6" Style="display: flex; justify-content: center; width: 100%;">
            Editar empleado
        </MudText>
    </TitleContent>
    <DialogContent>
        <StatusMessage Message="@message"/>
        <EditForm EditContext="editContext" FormName="profile" OnSubmit="SubmitPelado" method="post">
            <CustomValidator @ref="customValidator"></CustomValidator>

            <div class="form-floating mb-3">
                <InputText id="email" @bind-Value="Input.Email" class="form-control" aria-required="true"/>
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>

            <div class="form-floating mb-3">
                <InputText id="nombre" @bind-Value="Input.Nombre" class="form-control" aria-required="true"/>
                <label for="nombre">Nombre</label>
                <ValidationMessage For="() => Input.Nombre" class="text-danger"/>
            </div>

            <div class="form-floating mb-3">
                <InputText id="apellido" @bind-Value="Input.Apellido" class="form-control" aria-required="true"/>
                <label for="apellido">Apellido</label>
                <ValidationMessage For="() => Input.Apellido" class="text-danger"/>
            </div>

            <div class="form-floating mb-3">
                @* <InputSelect id="nacionalidad" @bind-Value="Input.Nacionalidad" class="form-select" aria-required="true" TValue="Nacionalidad?"> *@
                @*     <ValidationMessage For="() => Input.Nacionalidad" class="text-danger"/> *@
                @*     @foreach (Nacionalidad nacionalidad in Enum.GetValues(typeof(Nacionalidad))) *@
                @*     { *@
                @*         <option value=@nacionalidad> @nacionalidad </option> *@
                @*     } *@
                @* </InputSelect> *@
                <label for="nacionalidad" class="text-muted">Nacionalidad</label>
            </div>

            <div class="form-floating mb-3">

                @* <InputSelect id="genero" @bind-Value="Input.Genero" class="form-select" aria-required="true" TValue="Genero?"> *@
                @*     <ValidationMessage For="() => Input.Genero" class="text-danger"/> *@
                @* *@
                @*     @foreach (Genero genero in Enum.GetValues(typeof(Genero))) *@
                @*     { *@
                @*         <option value=@genero> @genero </option> *@
                @*     } *@
                @* </InputSelect> *@
                <label for="genero" class="text-muted">Género</label>
            </div>

            <div class="form-floating mb-3">
                <InputNumber id="dni" @bind-Value="Input.Dni" class="form-control" aria-required="true"/>
                <label for="dni">Dni</label>
                <ValidationMessage For="() => Input.Dni" class="text-danger"/>
            </div>

            <div class="form-floating mb-3">
                <InputDate id="fechaNacimiento" @bind-Value="Input.FechaNacimiento" class="form-control" aria-required="true"/>
                <label for="dni">Fecha de nacimiento</label>
                <ValidationMessage For="() => Input.FechaNacimiento" class="text-danger"/>
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Modificar datos</button>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Style="margin-left: auto">Cerrar</MudButton>
    </DialogActions>
</MudDialog>

@code 
{

     [Parameter] public ApplicationUser? Input { get; set; }

     [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
        
     private EditContext? editContext;

     public CustomValidator customValidator;

     public string? _emailPrevio;
     
     private string? message;
     
     
     void Cancel() => MudDialog!.Cancel();

     protected override void OnInitialized()
     {
         Input ??= new();
         editContext = new(Input);
         _emailPrevio = Input?.Email;
     }
     
     private async Task SubmitPelado()
    {
        Console.WriteLine($" email de empleado que puso es {Input?.Email}");
        var errors = new Dictionary<string, List<string>>();
        
        foreach (var property in Input?.GetType().GetProperties()) //me cago en microsoft
        {
            var value = property.GetValue(Input);
            // Console.WriteLine(property.Name);
            if (String.IsNullOrWhiteSpace(value?.ToString()))
            {
                errors.Add(property.Name, new List<string>() {"Este campo es obligatorio"});
            }
        }
        
        if (Input.Dni is not null)
        {
            if(Input.Dni.Value.CompareTo(1000000) < 0 || Input.Dni.Value.CompareTo(100000000) > 0) 
                errors.Add(nameof(Input.Dni), new List<string>(){"El número de dni debe estar entre un millon (1.000.000) y cien millones (100.000.000)"});
        }
        
        if (Input.FechaNacimiento is not null)
        {
            if (DateTime.Compare((DateTime)Input.FechaNacimiento, DateTime.Today.AddYears(-18)) > 0)
            {
                errors.Add(nameof(Input.FechaNacimiento), new List<string>(){"La edad mínima permitida es 18 años"});
            }

            if (DateTime.Compare((DateTime)Input.FechaNacimiento, DateTime.Today.AddYears(-120)) < 0)
            {
                errors.Add(nameof(Input.FechaNacimiento), new List<string>(){"La edad máxima permitida es 120 años"});
            }
        }

        if (!String.IsNullOrWhiteSpace(Input.Email))
        {
            var _ = new MailAddress("hola@hola.com");
            var valido = MailAddress.TryCreate(Input.Email, out _);
            if (!valido)
            {
                errors.Add(nameof(Input.Email), new List<string>() { "La direccion de email no es valida" });
            }
        }

        if (errors.Count > 0)
        {
            customValidator.DisplayErrors(errors);
            return;
        }
        
        await OnValidSubmitAsync();
    }
    
    private async Task OnValidSubmitAsync()
    {
        Console.WriteLine($"Datos de los inputs despues del form {Input?.Email}" +
                          $" nom:{Input.Nombre}" +
                          $" ap:{Input.Apellido}" +
                          $" nacimiento:{Input.FechaNacimiento}" +
                          $" dni:{Input.Dni}" +
                          $" Genero:{Input.Genero}" +
                          $" nacionalidad:{Input.Nacionalidad}");
        
        ModificarUser.Ejecutar(Input!);
        
        message = "Tus cambios se han guardado";
        
        if (Input?.Email is not null && Input.Email != _emailPrevio)
        {
            var otroUserConEseMail = await UserManager.FindByEmailAsync(Input.Email);
            if (otroUserConEseMail is not null)
            {
                message+= ", excepto el email, que ya esta en uso";
                //var errors = new Dictionary<string, List<string>>();
                //errors.Add(nameof(Input.Email), new List<string>() { "La direccion de email ya esta en uso" });
                Input.Email = _emailPrevio;
                //customValidator.DisplayErrors(errors);
            }
            else
            {
                
                var userId = await UserManager.GetUserIdAsync(Input);
                var code = await UserManager.GenerateChangeEmailTokenAsync(Input, Input.Email);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
                    new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.Email, ["code"] = code });

                Console.WriteLine($"email enviado onValidSubmit Async con el link {callbackUrl}");

                await EmailSender.SendConfirmationLinkAsync(Input, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                message = "Hemos enviado un link de confirmación para el cambio de correo. Ya puedes cerrar esta pestaña";
            }

        }
        else
        {
            Console.WriteLine($"No se mando mail porq el mail era igual {Input.Email} {_emailPrevio}");
        }
        
    }
    
}
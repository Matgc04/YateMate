@page "/embarcaciones"
@using YateMate.Aplicacion.UseCases.Oferta
@using YateMate.Components.Account
@inject ListarMisEmbarcacionesUseCase ListarMisEmbarcaciones
@inject ObtenerPublicacionUseCase ObtenerPublicacion
@inject IdentityUserAccessor UserAccessor

<!DOCTYPE html>

<html lang="es">
<head>
    <title>Mis embarcaciones</title>
</head>
<body>
<div >
    
    @if (_lista.Count == 0)
    {
        <h2>No tiene ninguna embarcaci√≥n para mostrar</h2>
    }
    else
    {
        <MudTable Items="_lista" Hover="true" Breakpoint="Breakpoint.Sm">
            <HeaderContent>
                <MudTh>Nombre</MudTh>
                <MudTh>Eslora</MudTh>
                <MudTh>Calado</MudTh>
                <MudTh>Publicar</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                <MudTd DataLabel="Calado">@context.Calado</MudTd>
                <MudTd DataLabel="Eslora">@context.Eslora</MudTd>
                    <MudTd DataLabel="Publicar button">
                @if (!EstaPublicado(@context.Id))
                {
                        <MudLink href="@("/publicar/" + context.Id)"> Publicar</MudLink>
                }
                    </MudTd>
            </RowTemplate>
        </MudTable>
    }
</div>
</body>
</html>

@code{
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    List<Embarcacion> _lista= new ();
    ApplicationUser _user = null!;
    
    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _lista = ListarMisEmbarcaciones.Ejecutar(_user.Id);
    }

    bool EstaPublicado(int id)
    {
        return ObtenerPublicacion.Ejecutar(id)!=null;
    }
}
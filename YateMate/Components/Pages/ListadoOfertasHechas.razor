@page "/ListadoOfertasHechas"

@rendermode InteractiveServer
@using YateMate.Aplicacion.UseCases.Bien
@using YateMate.Components.Shared
@using YateMate.Aplicacion.UseCases.Oferta
@* @inject IdentityUserAccessor UserAccessor; *@
@inject ObtenerBienUseCase ObtenerBienUseCase
@inject ObtenerPublicacionDeUseCase ObtenerPublicacionDeUseCase
@inject NavigationManager Navegador;
@inject ListarOfertasHechasUseCase ListarOfertasHechasUseCase
@inject EliminarOfertaUseCase EliminarOfertaUseCase
@inject IDialogService Dialog

<MudDialogProvider  FullWidth="true"
                    MaxWidth="MaxWidth.Small"
                    Position="DialogPosition.CenterLeft"/>

<h1>Ofertas hechas</h1>
<title>Ofertas hechas</title>

@if (!_tieneElementos)
{
    <h2>No tiene ofertas hechas.</h2>
}
else
{
    <MudPaper Width="100%" Class="darkbackground" MinHeight="350" Style="border: none; box-shadow: none;">
        <MudContainer>
            <MudGrid>
                @foreach (var oferta in _lista)
                {
                    var bien = ObtenerBienUseCase.Ejecutar(oferta.BienId);
                    var publicacion = ObtenerPublicacionDeUseCase.Ejecutar(oferta.PublicacionId);
                    <MudItem xs="4" Style="display:flex;">
                        <MudPaper Width="100%" Square="false" Class="pa-10 ma-2 infobox" Style="border: none; box-shadow: none;">
                            <MudCard>
                                <MudCardMedia Image=@bien.Imagen Height="200" Style="object-fit: contain;" />
                                <MudCardContent Style="min-height: 100px">
                                    <MudText Typo="Typo.h5" Style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">@bien.Nombre</MudText>
                                    <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@bien.Descripcion</MudText>
                                </MudCardContent>
                                <MudCardActions Style="justify-content: space-between;">
                                    @if (!oferta.Aceptada)
                                    {
                                        <MudButton Variant="Variant.Text" OnClick="() => Eliminar(oferta)" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"> Eliminar </MudButton>
                                    }
                                    else
                                    {
                                        <MudStack Direction="Row" Spacing="1">
                                            <MudText Color="Color.Success" Typo="Typo.h6">Aceptada
                                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success"/>
                                            </MudText>
                                        </MudStack>
                                    }
                                    <MudStack Direction="Row" Spacing="1">
                                        <MudText Color="Color.Info" size="Size.Small">Hecha a @publicacion.Titulo
                                            <MudIcon Icon="@Icons.Material.Filled.DirectionsBoat" Color="Color.Info"/>
                                        </MudText>
                                    </MudStack>
                                </MudCardActions>
                            </MudCard>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </MudPaper>
}

@code {
    [Parameter] public int? Id { get; set; }
    List<Oferta> _lista = new List<Oferta>();
    Oferta? _ofertaParaEliminar;
    bool _tieneElementos;

    [CascadingParameter] 
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private string? _userId;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState.User;
            _userId = user.Claims.FirstOrDefault()?.Value;
            _lista = ListarOfertasHechasUseCase.Ejecutar(_userId!);
        }
    }

    protected override void OnParametersSet()
    {
        if (_lista.Count > 0)
        {
            _tieneElementos = true;
        }
    }

    private void Eliminar(Oferta oferta)
    {
        _ofertaParaEliminar = oferta;
        EliminarOfertaUseCase.Ejecutar(_ofertaParaEliminar.Id);
        _lista = ListarOfertasHechasUseCase.Ejecutar(_userId!);
        if (_lista.Count == 0)
            _tieneElementos = false;
    }

}
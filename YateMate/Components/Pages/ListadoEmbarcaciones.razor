@page "/listadoembarcaciones/{Id}"
@using YateMate.Aplicacion.UseCases.Embarcaciones
@using YateMate.Components.Shared
@using YateMate.Components.Account.Shared
@inject ObtenerEmbarcacionesDeUseCase ObtenerEmbarcacionesDeUseCase
@inject  EliminarEmbarcacionUseCase EliminarEmbarcacionUseCase
@inject NavigationManager NavigationManager
@inject IDialogService Dialog

@rendermode InteractiveServer

<MudDialogProvider  FullWidth="true"
                    MaxWidth="MaxWidth.Small"
                    Position="DialogPosition.CenterLeft"/>

<DialogoConfirmacion @ref="_dialogo" OnConfirmado="EliminarEmbarcacion" />
<MudContainer>
    <h1>Listado de embarcaciones</h1>

    @if (!_tieneElementos)
    {
        <MudText Typo="Typo.h6">No hay elementos</MudText>
    }
    else
    {
        <MudTable Items="_lista" Class="mt-4" Dense="true" Outlined="true">
            <HeaderContent>
                <MudTh>NOMBRE</MudTh>
                <MudTh>ESLORA</MudTh>
                <MudTh>CALADO</MudTh>
                <MudTh>MANGA</MudTh>
                <MudTh>BANDERA</MudTh>
                <MudTh>MATRÍCULA</MudTh>
                <MudTh>ACCIÓN</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>
                    @context.Nombre
                </MudTd>
                <MudTd>
                    @context.Eslora
                </MudTd>
                <MudTd>
                    @context.Calado
                </MudTd>
                @* TODO: descomentar esto cuando este hecha la migracion *@
                <MudTd>
                    @context.Manga
                </MudTd>
                <MudTd>
                    @context.Bandera
                </MudTd>
                <MudTd>
                    @context.Matricula
                </MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => ModificarEmbarcacion(@context))">Modificar</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => ConfirmarEliminacion(@context))">Eliminar</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    [Parameter] public string Id { get; set; } = null!;

    List<Embarcacion> _lista = new List<Embarcacion>();
    bool _tieneElementos = false;
    protected override void OnInitialized()
    {
        string clienteId = Id;
        _lista = ObtenerEmbarcacionesDeUseCase.Ejecutar(clienteId);
    }

    protected override void OnParametersSet() => _tieneElementos = _lista.Count > 0;

    Embarcacion? _embarcacionAModificar;
    bool _mostrandoFormularioEdicion = false;
    void MostrarFormularioEdicion(Embarcacion embarcacion)
    {
        _embarcacionAModificar = embarcacion;
        _mostrandoFormularioEdicion = true;
    }
    public void ModificarEmbarcacion(Embarcacion embarcacion)
    {
        var parameters = new DialogParameters<EditarEmbarcacion>();
        parameters.Add(x => x.barco, embarcacion);
        Dialog.Show<EditarEmbarcacion>("Ver Datos", parameters);
    }
    
    DialogoConfirmacion _dialogo = null!;
    Embarcacion _embarcacionAEliminar = null;
    public void ConfirmarEliminacion(Embarcacion embarcacion)
    {
        _embarcacionAEliminar = embarcacion;
        _dialogo.Mensaje = $"Deseas eliminar a la embarcacion con matricula {_embarcacionAEliminar.Matricula}?";
        _dialogo.Mostrar();
    }

    public void EliminarEmbarcacion()
    {
        EliminarEmbarcacionUseCase.Ejecutar(_embarcacionAEliminar.Id);
        ActualizarLista();
    }
    
    private void ActualizarLista()
    {
        _lista = ObtenerEmbarcacionesDeUseCase.Ejecutar(Id);
        _tieneElementos = _lista.Count > 0;
    }

}
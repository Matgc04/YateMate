@page "/mis_publicaciones"
@using YateMate.Components.Account
@inject ListarMisPublicacionesUseCase ListarMisPublicaciones
@rendermode InteractiveServer
@inject IdentityUserAccessor UserAccessor
@inject IDialogService Dialog
@inject NavigationManager Navegador;
@using YateMate.Components.Shared

<h1>Mis publicaciones</h1>
<title>Mis publicaciones</title>
@if (!_tieneElementos)
{
<h2>No tiene publicaciones subidas en el sistema.</h2>

}
else
{
    <MudDialogProvider FullWidth="true"
                       MaxWidth="MaxWidth.Small"
                       Position="DialogPosition.CenterLeft"/>

    <MudGrid Style="width: 100%">
        @foreach (var publicacion in _lista)
        {
            //Version anterior de la carta en git
            <MudItem xs="4" Style="display:flex;">
                <MudPaper Width="100%" Square="false" Class="pa-10 ma-2 infobox" Style="border: none; box-shadow: none;">
                    <MudCard>
                        <MudCardMedia Image=@publicacion.Image Height="200" Style="object-fit: contain;"/>
                        <MudCardContent Style="min-height: 100px">
                            <MudText Typo="Typo.h5" Style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">@publicacion.Titulo</MudText> @*esto es para que si hay mucho texto ponga 3 puntos *@
                            <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@publicacion.Descripcion</MudText>
                        </MudCardContent>
                        <MudCardActions Style="justify-content: space-between;">
                            <MudButton Variant="Variant.Text" @onclick="() => HandleClick(publicacion)" Color="Color.Primary">Ver más</MudButton>
                            <MudButton Variant="Variant.Text" @onclick="()=>HandleClickOferta(publicacion.Id)" Color="Color.Primary">Listar ofertas</MudButton>
                            @* <MudButton Variant="Variant.Text" Color="Color.Primary"> ❤️</MudButton> *@
                            @* <MudButton Variant="Variant.Text" Color="Color.Primary">Enviar mensaje</MudButton> *@
                        </MudCardActions>
                    </MudCard>
                </MudPaper>
            </MudItem>

        }
    </MudGrid>
}

@code{
    bool _tieneElementos;
    List<Publicacion> _lista = new List<Publicacion>();
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }   
    string _userId=null!;
   
    protected override void OnParametersSet()
    {
        if(_lista.Count > 0) 
        {
            _tieneElementos = true;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState.User;
            _userId = user.Claims.FirstOrDefault()?.Value!;
            _lista = ListarMisPublicaciones.Ejecutar(_userId);
        }
    }

    public void HandleClick(Publicacion publicacion)
    {
        var parameters = new DialogParameters<VerDatosEmbarcacion>();
        parameters.Add( x=>x.Publicacion, publicacion);        
        parameters.Add( x=>x.Duenio, true);
        Dialog.Show<VerDatosEmbarcacion>("Simple Dialog", parameters);
    }

    public void HandleClickOferta(int publicacionId)
    {
        Navegador.NavigateTo($"/ListadoOfertas/{publicacionId}");
    }
}
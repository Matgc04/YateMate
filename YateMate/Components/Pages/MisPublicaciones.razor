@page "/mis_publicaciones"
@using YateMate.Components.Account
@inject ListarMisPublicacionesUseCase ListarMisPublicaciones
@rendermode InteractiveServer
@inject IdentityUserAccessor UserAccessor
@inject IDialogService Dialog
@using YateMate.Components.Shared

<h1>Mis publicaciones</h1>
<title>Mis publicaciones</title>
<MudDialogProvider></MudDialogProvider>
<MudGrid Style="width: 70%">
    @foreach (var publicacion in _lista)
    {
        <MudItem xs="10" sm="5" >
            <MudCardMedia Image="@publicacion.Image" Width="250" Height="300"  />
            <MudCardContent>
                <MudText Typo="Typo.h5">@publicacion.Titulo</MudText>
                <MudText Typo="Typo.body2">@publicacion.Descripcion</MudText>
            </MudCardContent>
            <MudCardActions Class="justify-space-between ">
                <MudButton Variant="Variant.Text" @onclick="()=>HandleClick(new Publicacion(publicacion.Image, publicacion.Titulo, publicacion.Descripcion,publicacion.EmbarcacionId))" Color="Color.Primary">Ver m√°s</MudButton>
            </MudCardActions>
        </MudItem>
    
    }
</MudGrid>
@code{
    List<Publicacion> _lista = new List<Publicacion>();
    [CascadingParameter]
    private Task<AuthenticationState>? _AuthenticationState { get; set; }   
    string _userId=null!;
   
    protected override async Task OnInitializedAsync()
    {
        if (_AuthenticationState is not null)
        {
            var authState = await _AuthenticationState;
            var user = authState.User;
            
            _userId = user.Claims.FirstOrDefault()?.Value!;
            _lista = ListarMisPublicaciones.Ejecutar(_userId);
        }
    }

    public void HandleClick(Publicacion publicacion)
    {
        var parameters = new DialogParameters<VerDatosEmbarcacion>();
        parameters.Add( x=>x.Publicacion, publicacion);
        Dialog.Show<VerDatosEmbarcacion>("Simple Dialog", parameters);
    }

}
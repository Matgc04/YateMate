@page "/ListadoReservas"

@rendermode InteractiveServer
@using YateMate.Components.Shared
@using YateMate.Aplicacion.UseCases.Reserva
@using YateMate.Aplicacion.UseCases.Subalquiler
@inject ListarReservasDeUseCase ListarReservasDeUseCase
@inject CancelarReservaUseCase CancelarReservaUseCase
@inject ObtenerSubalquilerUseCase ObtenerSubalquilerUseCase
@inject IDialogService Dialog
@inject NavigationManager Navegador;

<MudDialogProvider  FullWidth="true"
                    MaxWidth="MaxWidth.Small"
                    Position="DialogPosition.CenterLeft"/>

<h1>Mis reservas</h1>
<title>Mis reservas</title>

@if (!_tieneElementos)
{
    <h2>No tiene reservas vigentes.</h2>
}
else
{
    <MudPaper Width="100%" Class="darkbackground" MinHeight="350" Style="border: none; box-shadow: none;">
        <MudContainer>
            <MudGrid>
                @foreach (var reserva in _lista)
                {
                    var subalquiler = ObtenerSubalquilerUseCase.Ejecutar(reserva.SubalquilerId);
                    <MudItem xs="4" Style="display:flex;">
                        <MudPaper Width="100%" Square="false" Class="pa-10 ma-2 infobox" Style="border: none; box-shadow: none;">
                            <MudCard>
                                <MudCardContent Style="min-height: 100px">
                                    <MudText Typo="Typo.h5" Style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">ID AMARRA: @subalquiler?.IdAmarra</MudText>
                                    <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">Desde: @reserva.FechaInicio.ToString("d")</MudText>
                                    <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">Hasta: @reserva.FechaFin.ToString("d")</MudText>
                                </MudCardContent>
                                <MudCardActions Style="justify-content: space-between;">
                                    <MudButton Variant="Variant.Text" @onclick="@((e) => OpenDialog(reserva, subalquiler))" Color="Color.Primary">Ver m√°s</MudButton> 
                                </MudCardActions>
                            </MudCard>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </MudPaper>
}

@code {
    [Parameter] public int? Id { get; set; }
    List<Reserva> _lista = new List<Reserva>();
    Reserva? _reservaParaCancelar;
    bool _tieneElementos;

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private string? _userId;

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState.User;
            _userId = user.Claims.FirstOrDefault()?.Value;
            _lista = ListarReservasDeUseCase.Ejecutar(_userId!);
        }
    }

    protected override void OnParametersSet()
    {
        if (_lista.Count > 0)
        {
            _tieneElementos = true;
        }
    }

    [Inject] private IDialogService? DialogService { get; set; }
    
    private void OpenDialog(Reserva reserva , Subalquiler subalquiler)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<VerDatosReserva>();
        parameters.Add(x => x.Reserva, reserva);
        parameters.Add(x => x.Subalquiler, subalquiler);
        Dialog.Show<VerDatosReserva>("Ver Datos", parameters);
    }

}
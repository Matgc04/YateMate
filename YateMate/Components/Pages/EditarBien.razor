@page "/bien/{Id:int?}"

@using System.ComponentModel.DataAnnotations
@using YateMate.Aplicacion.UseCases.Bien

@inject ObtenerBienUseCase ObtenerBienUseCase
@inject ModificarBienUseCase ModificarBienUseCase
@inject AgregarBienUseCase AgregarBienUseCase
@inject NavigationManager Navegador;

@rendermode InteractiveServer

@if (_err.Length > 1)
{
    <h3>@_err</h3>
}
@if (_esNuevoBien)
{
    <h3>Agregando un nuevo bien</h3>
}
else
{
    <h3>Modificando al bien con id "@Id"</h3>
}


<EditForm OnSubmit="Aceptar" Model="Input" Enhance>
    <MudCard>
        <MudCardContent>
            <MudTextField HelperText="Titulo de la Publicacion"
                          @bind-Value="Input.Nombre" For="@(() => Input.Nombre)" Required="true"/>
            <MudTextField T="string" HelperText="Descripcion de la Embarcacion" Variant="Variant.Text" Text="@Input.Descripcion" @bind-Value="Input.Descripcion" AutoGrow Lines="1" Required="true"/>
            <br/>
            @if (@Input.Imagen != "")
            {
            <MudImage src="@Input.Imagen"  Height="400" Style="object-fit: contain;"></MudImage>
            }
            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Context="EditButtonContext" Required="true" Accept="image/jpeg, image/jpg, image/png, image/webp" >
                <ButtonTemplate >
                    <MudButton HtmlTag="label"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.CloudUpload"
                               for="@EditButtonContext.Id">
                        Subir imagen
                    </MudButton>
                </ButtonTemplate>
            </MudFileUpload>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Publicar</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>


@code {
    
    [CascadingParameter]
    private Task<AuthenticationState>? _AuthenticationState { get; set; }

    private string? _userId;    
    
    protected override async Task OnInitializedAsync()
    {
        if (_AuthenticationState is not null)
        {
            var authState = await _AuthenticationState;
            var user = authState.User;
            
            _userId = user.Claims.FirstOrDefault()?.Value;
        }
        else
        {
            Console.WriteLine("Authstate es null, no se que decirte");
        }
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        var reader = file.OpenReadStream(long.MaxValue);
        await reader.ReadExactlyAsync(buffer);
        var imagesrc = Convert.ToBase64String(buffer);
        reader.Close();
        Input.Imagen = $"data:{file.ContentType};base64,{imagesrc}";
    }
    
    bool _esNuevoBien = true;
    Bien Input = new Bien("", "", "", "");
    string _err = "";
    
    
    
    [Parameter] public int? Id { get; set; }
    protected override void OnParametersSet()
    {
        if (Id != null)
        {
            var bienHallado = ObtenerBienUseCase.Ejecutar(Id.Value);
            if (bienHallado != null)
            {
                Input = bienHallado;
                _esNuevoBien = false;
            }
        }
    }
    
    async void Aceptar()
    {
           
            Input.UsuarioId = _userId;
            
            if(_userId is null)
                Console.WriteLine("user id es null, no se q decirte");
            
            // Console.WriteLine(Input.Nombre);
            if (_esNuevoBien)
            {
                // Console.WriteLine("Entro al if");
                AgregarBienUseCase.Ejecutar(Input);
            }
            else
            {
                ModificarBienUseCase.Ejecutar(Input);
            }
            Navegador.NavigateTo("/ListarMisBienes");
            
    }

    private sealed class InputModel
    {
        [Required]
        public string Nombre;
        
        [Required]
        public string Descripcion;
        
        [Required]
        public string? Imagen;
    }

}
@page "/admin"
@using Microsoft.AspNetCore.Identity
@using YateMate.Aplicacion.UseCases.ApplicationUser
@using YateMate.Components.Account.Shared
@using YateMate.Components.Shared

@inject ObtenerEmpleadosUseCase ObtenerEmpleadosUseCase;
@inject EliminarApplicationUserUseCase EliminarApplicationUserUseCase;
@* @inject UserManager<ApplicationUser> UserManager le agrego el rol desde aca ya fue*@
@* @inject NavigationManager Navegador; *@
@inject IDialogService Dialog

@rendermode InteractiveServer

<PageTitle> Admin </PageTitle>
<MudDialogProvider  FullWidth="true"
                    MaxWidth="MaxWidth.Small"
                    Position="DialogPosition.CenterLeft"/>

<DialogoConfirmacion @ref="_dialogo" OnConfirmado="EliminarApplicationUser" />

<MudContainer>
    @if (!_tieneElementos)
    {
    <MudText Typo="Typo.h6">No hay elementos</MudText>
    }
    else
    {
    <MudTable Items="@_lista" Class="mt-4" Dense="true" Outlined="true">
        <HeaderContent>
            <MudTh>Email</MudTh>
            <MudTh>Nombre</MudTh>
            <MudTh>Apellido</MudTh>
            <MudTh>Nacionalidad</MudTh>
            <MudTh>Genero</MudTh>
            <MudTh>DNI</MudTh>
            <MudTh>Fecha de nacimiento</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Email</MudTd>
            <MudTd>@context.Nombre</MudTd>
            <MudTd>@context.Apellido</MudTd>
            <MudTd>@context.Nacionalidad</MudTd>
            <MudTd>@context.Genero</MudTd>
            <MudTd>@context.Dni</MudTd>
            <MudTd>@context.FechaNacimiento!.Value.ToString("dd-MM-yyyy")</MudTd>
            <MudTd>
                
                <div class="button-container">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => VerEmpleado(context))">Ver datos</MudButton>
                </div>
                <div class="button-container">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => EditarEmpleado(context))">Modificar</MudButton>
                </div>
                <div class="button-container">
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => ConfirmarEliminacion(context))">Eliminar</MudButton>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
    }
    <br/>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => EditarEmpleado(null))" StartIcon="@Icons.Material.Filled.Add" > Agregar Empleado</MudButton>
</MudContainer>




@code {
        
        
    List<ApplicationUser> _lista = new();
    bool _tieneElementos = false;

    protected override void OnInitialized()
    {
        _lista = ObtenerEmpleadosUseCase.Ejecutar();
    }
    protected override void OnParametersSet()
    {
        _tieneElementos = _lista.Count > 0;
    }

    DialogoConfirmacion _dialogo = null!;
    void ConfirmarEliminacion(ApplicationUser user)
    {
        _userAEliminar = user;
        _dialogo.Mensaje = $"Deseas eliminar al empleado {user.Nombre} ?";
        _dialogo.Mostrar();
    }

    ApplicationUser? _userAEliminar = null;
    private void EliminarApplicationUser()
    {
        EliminarApplicationUserUseCase.Ejecutar(_userAEliminar!.Id);
        ActualizarLista();
    }

    private async void EditarEmpleado(ApplicationUser? empleado)
    {
        string mensaje = empleado is null ? "Agregando empleado" : "Modificando empleado";
        string textoBoton = empleado is null ? "Agregar" : "Modificar";
        var parameters = new DialogParameters<EditarEmpleado>();
        parameters.Add(x => x.Empleado, empleado);
        parameters.Add(x => x.textoBoton, textoBoton);
        parameters.Add(x => x.agregando, empleado is null);
        var _ = Dialog.Show<EditarEmpleado>(mensaje, parameters);
        await _.Result;
        _lista = ObtenerEmpleadosUseCase.Ejecutar(); //lo mas eficiente seria definir un callback en el que el hijo me pase el valor actualizado y uso ese en vez de consultar la bd
        StateHasChanged();
    }

    private void VerEmpleado(ApplicationUser empleado)
    {
        var parameters = new DialogParameters<VerDatosEmpleado>();
        parameters.Add(x => x.Empleado, empleado);
        Dialog.Show<VerDatosEmpleado>($"Viendo al empleado {empleado.Nombre}", parameters);
    }

    private void ActualizarLista()
    {
        _lista = ObtenerEmpleadosUseCase.Ejecutar();

        _tieneElementos = _lista.Count > 0;
    }
    
}

<style>
    .button-container {
        margin-bottom: 8px;
    }
</style>
@page "/ListadoPublicacionesDisponibles"
@using YateMate.Aplicacion.UseCases.Oferta
@inject ListarTruequesDisponiblesUseCase ListarTruequesDisponiblesUseCase
@inject NavigationManager Navegador;
@inject FiltrarPublicacionesPorEsloraUseCase FiltrarPorEslora
@inject FiltrarPublicacionesPorCaladoUseCase FiltrarPorCalado
@inject IDialogService Dialog
@using YateMate.Components.Shared
@rendermode InteractiveServer

<h1>Publicaciones disponibles</h1>
<title>Publicaciones</title>
<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.Small"
                   Position="DialogPosition.CenterLeft" />

<div style="overflow-x:@(!_tieneElementos ? "hidden" : "inherit")">
    
        @if (!_tieneElementos) {
            <h4>No hay trueques disponibles en este momento.</h4>
        }
        else {
            <MudGrid>
                <MudItem sm="12" md="6">
                    <h5>Filtrar por eslora</h5>
                    <MudRadioGroup @bind-Value="@OpcionEslora">
                        <MudRadio Value="@("0 - 5")"> &lt;5m </MudRadio>
                        <MudRadio Value="@("5 -10 ")"> &gt;5m - &lt;10m</MudRadio>
                        <MudRadio Value="@("10 - 15")"> &gt;10m - &lt;15m</MudRadio>
                        <MudRadio Value="@("15 -" + int.MaxValue)"> &gt;15m</MudRadio>
                    </MudRadioGroup>
                </MudItem>
                <MudItem sm="12" md="6">
                    <h5>Filtrar por calado</h5>
                    <MudRadioGroup @bind-Value="@OpcionCalado">
                        <MudRadio Value="@("0 - 5")"> &lt;5m </MudRadio>
                        <MudRadio Value="@("5 -10 ")"> &gt;5m - &lt;10m</MudRadio>
                        <MudRadio Value="@("10 - 15")"> &gt;10m - &lt;15m</MudRadio>
                        <MudRadio Value="@("15 -" +int.MaxValue)"> &gt;15m</MudRadio>
                    </MudRadioGroup>
                </MudItem>
                <MudItem sm="12" md="6">
                    <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" OnClick="HandleClick">Aplicar filtros</MudButton>
                    <MudButton Variant="Variant.Outlined" DisableElevation="true" Color="Color.Primary" OnClick="HandleClickBorrar">Borrar filtros</MudButton>
                </MudItem>
            </MudGrid>
            if (_mostrar.Count == 0)
            {
                <h4>No hay embarcaciones que cumplan con los requisitos</h4>
            }
        <MudGrid Style="width: 100%">
            @foreach (var publicacion in _mostrar)
            {
                // Si queres la version anterior de la carta mira git
                    <MudItem xs="4" Style="display:flex;">
                        <MudPaper Width="100%" Square="false" Class="pa-10 ma-2 infobox" Style="border: none; box-shadow: none;">
                            <MudCard>
                                <MudCardMedia Image=@publicacion.Image Height="200" Style="object-fit: contain;" />
                                <MudCardContent Style="min-height: 100px">
                                    <MudText Typo="Typo.h5" Style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">@publicacion.Titulo</MudText> @*esto es para que si hay mucho texto ponga 3 puntos *@
                                    <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@publicacion.Descripcion</MudText>
                                </MudCardContent>
                                <MudCardActions Style="justify-content: space-between;">
                                    <MudButton Variant="Variant.Text" @onclick="()=>HandleClick(new Publicacion(publicacion.Image, publicacion.Titulo, publicacion.Descripcion,publicacion.EmbarcacionId))" Color="Color.Primary">Ver más</MudButton>
                                    @* <MudButton Variant="Variant.Text" Color="Color.Primary"> ❤️</MudButton> *@
                                    @* <MudButton Variant="Variant.Text" Color="Color.Primary">Enviar mensaje</MudButton> *@
                                </MudCardActions>
                            </MudCard>
                        </MudPaper>
                    </MudItem>
            }
        </MudGrid>
        }

</div>


@code {
    public string OpcionEslora { get; set; } = "";
    public string OpcionCalado { get; set; } = "";
    List<Publicacion> _lista = new List<Publicacion>();
    List<Publicacion> _mostrar = new List<Publicacion>();

    bool _tieneElementos;
    
    protected override void OnInitialized()
    {
        _lista = ListarTruequesDisponiblesUseCase.Ejecutar();
        _mostrar = _lista;
    }
    protected override void OnParametersSet()
    {
        if(_lista.Count > 0) 
        {
            _tieneElementos = true;
            
        }
    }

    protected void HandleClick()
    {
        _mostrar = _lista;
        if (OpcionEslora != "")
        {
            var options = OpcionEslora.Split('-');
            _mostrar = FiltrarPorEslora.Ejecutar(_lista, int.Parse(options[0]), int.Parse(options[1]));
        }

        if (OpcionCalado !="")
        {
            var options = OpcionCalado.Split('-');
            _mostrar = FiltrarPorCalado.Ejecutar(_mostrar, int.Parse(options[0]), int.Parse(options[1])); 
        }
    }
    protected void HandleClickBorrar()
    {
        OpcionEslora = "";
        OpcionCalado = "";
        _mostrar = _lista;
    }
    
    public void HandleClick(Publicacion publicacion)
    {
        var parameters = new DialogParameters<VerDatosEmbarcacion>();
        parameters.Add( x=>x.Publicacion, publicacion);
        Dialog.Show<VerDatosEmbarcacion>("Simple Dialog", parameters);
    }
}
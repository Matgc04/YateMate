@page "/ListadoTruequesDisponibles"
@using YateMate.Aplicacion.UseCases.Oferta
@inject ListarTruequesDisponiblesUseCase ListarTruequesDisponiblesUseCase
@inject NavigationManager Navegador;
@inject FiltrarPublicacionesPorEsloraUseCase FiltrarPorEslora
@inject FiltrarPublicacionesPorCaladoUseCase FiltrarPorCalado
@rendermode InteractiveServer

<h3>Trueques disponibles</h3>

@* <div style="overflow-x:@(!_tieneElementos ? "hidden" : "auto")"> *@
    
        @if (!_tieneElementos) {
            <p>No hay trueques disponibles en este momento.</p>
        }
        else 
        {
            <MudGrid>
                <MudItem sm="12" md="6">
                    <h3>Eslora</h3>
                    <MudRadioGroup @bind-Value="@OpcionEslora">
                        <MudRadio Value="@("0 - 5")"> &lt;5m </MudRadio>
                        <MudRadio Value="@("5 - 10")"> &gt;5m - &lt;10m</MudRadio>
                        <MudRadio Value="@("10 - 15")"> &gt;10m - &lt;15m</MudRadio>
                        <MudRadio Value="@("15 - 20")"> &gt;15m</MudRadio>
                    </MudRadioGroup>
                </MudItem>
                <MudItem sm="12" md="6">
                    <h3>Calado</h3>
                    <MudRadioGroup @bind-Value="@OpcionCalado">
                        <MudRadio Value="@("0 - 5")"> &lt;5m </MudRadio>
                        <MudRadio Value="@("5 - 10")"> &gt;5m - &lt;10m</MudRadio>
                        <MudRadio Value="@("10 - 15")"> &gt;10m - &lt;15m</MudRadio>
                        <MudRadio Value="@("15 -" +int.MaxValue)"> &gt;15m</MudRadio>
                    </MudRadioGroup>
                </MudItem>
                <MudItem sm="12" md="6">
                    <MudButton Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" OnClick="HandleClick">Aplicar filtros</MudButton>
                    <MudButton Variant="Variant.Outlined" DisableElevation="true" Color="Color.Primary" OnClick="HandleClickBorrar">Borrar filtros</MudButton>
                </MudItem>
                </MudGrid>
            <MudGrid Style="width: 100%">
                @foreach (var publicacion in _mostrar)
                {
                    
                    @* <MudItem xs="4" Style="display:flex;"> *@
                    @*     <MudPaper Width="100%" Square="false" Class="pa-10 ma-2 infobox" Style="border: none; box-shadow: none;"> *@
                    @*         <MudCard> *@
                    @*             <MudCardMedia Image=@publicacion.Image Height="200" Style="object-fit: contain;" /> *@
                    @*             <MudCardContent Style="min-height: 100px"> *@
                    @*                 <MudText Typo="Typo.h5" Style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">@publicacion.Titulo</MudText> $1$esto es para que si hay mucho texto ponga 3 puntos #1# *@
                    @*                 <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@publicacion.Descripcion</MudText> *@
                    @*             </MudCardContent> *@
                    @*             <MudCardActions Style="justify-content: space-between;"> *@
                    @*                 $1$ <MudButton Variant="Variant.Text" @onclick="@((e) => OpenDialog(bien))" Color="Color.Primary">Ver más</MudButton> $2$Aca hay que crear un evento que rediriga/abra una ventana en la que podamos modificar/eliminar el bien y eso*/ #1# *@
                    @*                 $1$ <MudButton Variant="Variant.Text" Color="Color.Primary"> ❤️</MudButton> #1# *@
                    @*                 $1$ <MudButton Variant="Variant.Text" Color="Color.Primary">Enviar mensaje</MudButton> #1# *@
                    @*             </MudCardActions> *@
                    @*         </MudCard> *@
                    @*     </MudPaper> *@
                    @* </MudItem> *@
                    
                    
                         <MudItem xs="10" sm="5" >
                             <MudCardMedia Image="@publicacion.Image" Width="250" Height="300"  />
                             <MudCardContent>
                                 <MudText Typo="Typo.h5">@publicacion.Titulo</MudText>
                                 <MudText Typo="Typo.body2">@publicacion.Descripcion</MudText>
                             </MudCardContent>
                            <MudCardActions Class="justify-space-between ">
                                 @* <MudButton Variant="Variant.Text" Color="Color.Primary"> ❤️</MudButton> *@
                                 @* <MudButton Variant="Variant.Text" Color="Color.Primary">Enviar mensaje</MudButton> *@
                             </MudCardActions>
                        </MudItem>
                    
                }
            </MudGrid>
        }

@* </div> *@


@code 
{
    public string OpcionEslora { get; set; } = "";
    public string OpcionCalado { get; set; } = "";
    List<Publicacion> _lista = new List<Publicacion>();
    List<Publicacion> _mostrar = new List<Publicacion>();

    bool _tieneElementos;
    
    protected override void OnInitialized()
    {
        _lista = ListarTruequesDisponiblesUseCase.Ejecutar();
        _mostrar = _lista;
    }
    protected override void OnParametersSet()
    {
        if(_lista.Count > 0) 
        {
            _tieneElementos = true;
            
        }
    }

    protected void HandleClick()
    {
        _mostrar = _lista;
        if (OpcionEslora != "")
        {
            var options = OpcionEslora.Split('-');
            _mostrar = FiltrarPorEslora.Ejecutar(_lista, int.Parse(options[0]), int.Parse(options[1]));
        }

        if (OpcionCalado !="")
        {
            var options = OpcionCalado.Split('-');
            _mostrar = FiltrarPorCalado.Ejecutar(_lista, int.Parse(options[0]), int.Parse(options[1])); 
        }
    }
    protected void HandleClickBorrar()
    {
        OpcionEslora = "";
        OpcionCalado = "";
        _mostrar = _lista;
    }
    
    
}
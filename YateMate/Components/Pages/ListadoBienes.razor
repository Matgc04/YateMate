@page "/ListarMisBienes/{Origen}"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Options
@using YateMate.Aplicacion.UseCases.Bien
@using YateMate.Components.Account
@using YateMate.Components.Account.Shared
@using YateMate.Components.Shared

@using MudBlazor.Components
@using YateMate.Aplicacion.UseCases.Oferta
@* @inject IdentityUserAccessor UserAccessor; *@
@inject ListarBienesDeUseCase ListarBienesDeUseCase
@inject EliminarBienUseCase EliminarBienUseCase
@inject HacerOfertaUseCase HacerOfertaUseCase
@inject ListarOfertasDeUseCase ListarOfertasDeUseCase
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager Navegador;
@inject IDialogService Dialog

<MudDialogProvider  FullWidth="true"
                    MaxWidth="MaxWidth.Small"
                    Position="DialogPosition.CenterLeft"/>

<title>Mis bienes</title>
<h1>Mis bienes</h1>

@if (!_tieneElementos && Origen!.Equals("lista")) 
{
    <h2>No tiene bienes cargados en el sistema.</h2>
}
else if (!_tieneElementos)
{
    <h2>No tiene bienes para ofertar actualmente.</h2>
}
else
{
    //https://stackoverflow.com/questions/71209726/same-size-for-all-muditem-using-mudblazor
    //otro poco lo tunee yo (Claude) 
    
    <MudPaper Width="100%" Class="darkbackground" MinHeight="350" Style="border: none; box-shadow: none;"> @*esto es para sacarle las lineas de afuera*@
        <MudContainer>
            <MudGrid>
                @foreach (var bien in _lista)
                {
                    <MudItem xs="4" Style="display:flex;">
                        <MudPaper Width="100%" Square="false" Class="pa-10 ma-2 infobox" Style="border: none; box-shadow: none;">
                            <MudCard>
                                <MudCardMedia Image=@bien.Imagen Height="200" Style="object-fit: contain;" />
                                <MudCardContent Style="min-height: 100px">
                                    <MudText Typo="Typo.h5" Style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">@bien.Nombre</MudText> @*esto es para que si hay mucho texto ponga 3 puntos *@
                                    <MudText Typo="Typo.body2" Style="overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical;">@bien.Descripcion</MudText>
                                </MudCardContent>
                                <MudCardActions Style="justify-content: space-between;">
                                    @if (Origen!.Equals("lista"))
                                    {
                                        <MudButton Variant="Variant.Text" @onclick="@((e) => OpenDialog(bien))" Color="Color.Primary">Ver m√°s</MudButton>
                                        <MudButton Variant="Variant.Text" OnClick="() => Eliminar(bien)" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"> Borrar </MudButton>
                                    }
                                    else if (!ListarOfertasDeUseCase.Ejecutar(int.Parse(Origen!)).Exists(o => o.BienId == bien.Id))
                                    {
                                        <MudButton Variant="Variant.Text" OnClick="() => Ofertar(bien)" Color="Color.Primary"> Ofertar </MudButton>
                                    }
                                </MudCardActions>
                            </MudCard>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </MudPaper>
    
}
@if (Origen!.Equals("lista"))
{
    <br/>
    <button type="button" class="btn btn-primary" @onclick="@(() => Navegador.NavigateTo("bien/"))">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"></path>
        </svg>
        Agregar Bien
    </button>
}

@code {
    [Parameter] public string? Origen { get; set; }
    bool _tieneElementos;
    List<Bien> _lista = new();
    Bien? _bienParaEliminar;
    
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    private string? _userId;    
    
    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState.User;
            
            _userId = user.Claims.FirstOrDefault()?.Value;
        }
        else
        {
            Console.WriteLine("Authstate es null, no se que decirte");
        }

        _lista = ListarBienesDeUseCase.Ejecutar(_userId!);
    }
    
    protected override void OnParametersSet()
    {
        if(_lista.Count > 0) 
        {
            _tieneElementos = true;
        }
    }
    
    private void Eliminar(Bien bien)
    {
        _bienParaEliminar = bien;
        EliminarBienUseCase.Ejecutar(_bienParaEliminar.Id);
        _lista = ListarBienesDeUseCase.Ejecutar(_userId!);
        if (_lista.Count == 0)
            _tieneElementos = false;
    }

    private void Ofertar(Bien bien)
    {
        var oferta = new Oferta(bien.Id,int.Parse(Origen!), _userId);
        HacerOfertaUseCase.Ejecutar(oferta);
        // tengo que mandar el mail todavia
        Navegador.NavigateTo($"/ListadoPublicacionesDisponibles");
    }
    
    private void OpenDialog(Bien bien)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<VerDatosBien>();
        parameters.Add(x => x.Bien, bien);
        parameters.Add(x => x.Duenio, false);
        Dialog.Show<VerDatosBien>("Ver Datos", parameters);
    }
}

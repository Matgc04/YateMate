@page "/agregarApplicationUser"
@using YateMate.Aplicacion.UseCases.ApplicationUser
@using  System.ComponentModel.DataAnnotations
@using System.Net.Mail
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using YateMate.Aplicacion.Entidades;
@using YateMate.Components.Account
@using YateMate.Components.Account.Pages
@using YateMate.Components.Account.Shared

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@*dice que no se usa pero es mentira, si lo sacas se creashea la pagina*@

@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager


<PageTitle>Agregar Cliente</PageTitle>

<h1>Agregar Cliente</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message"/>
        <EditForm EditContext="editContext" asp-route-returnUrl="@ReturnUrl" method="post" OnSubmit="SubmitPelado" FormName="register">
            <CustomValidator @ref="customValidator"></CustomValidator>
            <h2>Crea una nueva cuenta.</h2>
            <hr/>
            
            <div class="form-floating mb-3">
                <InputText id="email" @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com"/>
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger"/>
            </div>

            <div class="form-floating mb-3">
                <InputText id="nombre" @bind-Value="Input.Nombre" class="form-control" aria-required="true" />
                <label for="nombre">Nombre</label>
                <ValidationMessage For="() => Input.Nombre" class="text-danger" />
            </div>
            
            <div class="form-floating mb-3">
                <InputText id="apellido" @bind-Value="Input.Apellido" class="form-control" aria-required="true" />
                <label for="apellido">Apellido</label>
                <ValidationMessage For="() => Input.Apellido" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputSelect id="nacionalidad" @bind-Value="Input.Nacionalidad" class="form-select" aria-required="true" TValue="Nacionalidad?">
                    <option value=""></option>
                    @foreach (Nacionalidad nacionalidad in Enum.GetValues(typeof(Nacionalidad)))
                    {
                    <option value=@nacionalidad> @nacionalidad </option>
                    }
                </InputSelect>
                <label for="nacionalidad" class="text-muted">Nacionalidad</label>
                <ValidationMessage For="() => Input.Nacionalidad" class="text-danger"/>
                
            </div>
            
            <div class="form-floating mb-3">
                <InputSelect id="genero" @bind-Value="Input.Genero" class="form-control" aria-required="true">
                    <option value=""></option> @* tiene que estar en blanco porque si no muestra Masculino re feo *@
                    <option value="Masculino">Masculino</option>
                    <option value="Femenino">Femenino</option>
                </InputSelect>
                <label for="genero" class="text-muted">Género</label>
                <ValidationMessage For="() => Input.Genero" class="text-danger"/>
            </div>

            <div class="form-floating mb-3">
                <InputNumber id="dni" @bind-Value="Input.Dni" class="form-control" aria-required="true" />
                <label for="dni">Dni</label>
                <ValidationMessage For="() => Input.Dni" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputDate id="fechaNacimiento" @bind-Value="Input.FechaNacimiento" class="form-control" aria-required="true" />
                <label for="fechaNacimiento">Fecha de nacimiento</label>
                <ValidationMessage For="() => Input.FechaNacimiento" class="text-danger" />
            </div>
            
            <button type="submit" class="w-100 btn btn-lg btn-primary">Registrarse</button>
        </EditForm>
    </div>
    
</div>

@code {
    private IEnumerable<IdentityError>? _identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => _identityErrors is null ? null : $"Error: {string.Join(", ", _identityErrors.Select(error => error.Description))}";

    private EditContext? editContext;

    public CustomValidator customValidator;
    
    protected override void OnInitialized()
    {
        Input ??= new();
        editContext = new(Input);
    }
    
    
    private async Task SubmitPelado()
    {
        var errors = new Dictionary<string, List<string>>();
        
        foreach (var property in Input.GetType().GetProperties()) //me cago en microsoft
        {
            var value = property.GetValue(Input);
            Console.WriteLine(property.Name);
            if (String.IsNullOrWhiteSpace(value?.ToString()))
            {
                errors.Add(property.Name, new List<string>() {"Este campo es obligatorio"});
            }
        }

        if (Input.Dni is not null)
        {
            if(Input.Dni.Value.CompareTo(1000000) < 0 || Input.Dni.Value.CompareTo(100000000) > 0) 
                errors.Add(nameof(Input.Dni), new List<string>(){"El número de dni debe estar entre un millon (1.000.000) y cien millones (100.000.000)"});
        }
        
        if (Input.FechaNacimiento is not null)
        {
            if (DateTime.Compare((DateTime)Input.FechaNacimiento, DateTime.Today.AddYears(-18)) > 0)
            {
                errors.Add(nameof(Input.FechaNacimiento), new List<string>(){"La edad mínima permitida es 18 años"});
                Console.WriteLine("a1");

            }

            if (DateTime.Compare((DateTime)Input.FechaNacimiento, DateTime.Today.AddYears(-120)) < 0)
            {
                Console.WriteLine("a2");
                errors.Add(nameof(Input.FechaNacimiento), new List<string>(){"La edad máxima permitida es 120 años"});
            }
        }

        if (!String.IsNullOrWhiteSpace(Input.Email))
        {
            var mail = new MailAddress("hola@hola.com");
            var valido = MailAddress.TryCreate(Input.Email, out mail);
            if (!valido)
            {
                errors.Add(nameof(Input.Email), new List<string>() { "La direccion de email no es valida" });
            }
        }

        if (errors.Count > 0)
        {
            customValidator.DisplayErrors(errors);
            return;
        }
        
        await RegisterUser();
    }
    
    public async Task RegisterUser()
    {
        var user = new ApplicationUser()
        {
            //UserName = userName,
            Email = Input.Email,
            Nombre = Input.Nombre,
            Apellido = Input.Apellido,
            Nacionalidad = (Nacionalidad)Input.Nacionalidad!,
            Genero = (Genero)Input.Genero!, 
            Dni = Input.Dni,
            FechaNacimiento =Input.FechaNacimiento
                
        };
        //Input.Password = "Falso123,";
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, "Falso123,"); //tenes un overload sin contrasenia pero tira error
        //var result = await UserManager.CreateAsync(user);
        ////pongo una contrasenia por defecto porque es necesaria, no hay problema porque no confirmo email hasta cambiar la contrasenia por primera vez
        if (!result.Succeeded)
        {
            _identityErrors = result.Errors.Where(error => error.Code != "DuplicateUserName"); 
            return;
        }
        await UserManager.AddToRoleAsync(user, "Cliente");
        Logger.LogInformation("User created a new account without password.");
        
        
        //envio mail de cambiar contrasenia
        
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code, ["email"] = Input.Email });
        //aca se pasa como parametro de la url un codigo usado para validar por Identity y el email del usuario asi no lo tiene que tipear despues
        //capaz se puede que con el codigo saque el email pero asi es mas facil
        
        //Console.WriteLine($"La url para poner tu contrasenia es {callbackUrl}");
        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
        RedirectManager.RedirectTo("Account/EmpleadoPasswordConfirmation");
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Ingresa un email")]
        [EmailAddress(ErrorMessage = "La direccion de correo ingresada no es valida")]
        [Display(Name = "Email")]
        public string? Email { get; set; } = null;
        
        [Required(ErrorMessage = "Ingresa un nombre")]
        [Display(Name = "Nombre")]
        public string? Nombre { get; set; } = null!;
        
        [Required(ErrorMessage = "Ingresa un apellido")]
        [Display(Name = "Apellido")]
        public string? Apellido { get; set; } = null!;
        
        [Required(ErrorMessage = "Ingresa un genero")]
        [Display(Name = "Genero")]
        public Genero? Genero { get; set; }
        
        [Required(ErrorMessage = "Ingresa una fecha de nacimiento")]
        [Display(Name = "Fecha de Nacimiento")]
        public DateTime? FechaNacimiento { get; set; }

        [Required]
        [Display(Name = "Dni")]
        [Range(1000000, 100000000, ErrorMessage = "El número de dni debe estar entre un millon (1.000.000) y cien millones (100.000.000)")]
        public int? Dni { get; set; }
        
        [Required(ErrorMessage = "Ingresa una nacionalidad")]
        [Display(Name = "Nacionalidad")]
        public Nacionalidad? Nacionalidad { get; set; }
    }

   
    
}